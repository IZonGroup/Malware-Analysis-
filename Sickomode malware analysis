 

This is an analysis of malware from a fellow Marine @huskyhacks's who teaches malware analysis. Figured it would be good to share as well as to show some simple analysis of malware. 
 
 
 
 
Preface: 
"Analyst,
This specimen came from a poor decision and a link that should not have been clicked on. No surprises there. We need to figure out the extent of what this thing can do. It looks a little advanced.
Perform a full analysis and send us the report when done. We need to go in depth on this one to determine what it is doing, so break out your decompiler and debugger and get to work!
IR Team"
Objective: 
 
Use all of the tools at our disposal to analyze the malware sample and answer gather information we will need to further understand the threat actor and their capabilities and TTP's:
 
So first off I am using the FlareVM for the analysis as well as a REMnux box for packet inspection and dynamic network analysis. It's important to note that none of this is networked to the host machine and it's all done in a sterile lab environment, or it's supposed to be. 
 
Initially I want to find out some basic information about the binary in question, like what language it is written in, hashes, VirusTotal results and things like that. You can use simple commands like certutil 
 
 
 
Once you have the hash you can find out a lot about the binary simply through open source research done by others. Going to sites like VirusTotal or automated malware analysis sites like Triage where you can search by hash value can give you a lot of information about the binary already 
 
 
 
 
 
From these automated results we can begin to answer some basic questions like: 
What language is the binary written and what is the architecture: This is a x64 64bit executable for MS Windows (GUI) Mono/.Net assembly written in nim which compiles to C. C++, and Java
 
Or if you want to use tools on the FlareVM such as PEStudio or Cutter you can find the same results.  
 
An interesting note about this binary is that after detonation if the binary cannot connect to an outside address it will delete itself. The goal of the binary is to callback to a specific outside C2 address and if that address does not connect it will simply delete itself without harming the system. 
 
There is no persistence in this binary even though it does reach out to C2 servers as you can see below,:
 
 
 
The first callback domain is update.ec12-4-109-278-3-ubuntu20-04.local  as can be seen here in Wireshark on our REMnux box 
 
 
This binary will exfil data as well if it can make a connection to a secondary address hxxp://cdn.altimiter.local in this case. It either encrypts or encodes the data and sends it out via GET request using a post method to write to a log in the domain. Because it is either encrypted or encoded we will need to figure out how and with what algorithm 
 
After looking through strings output from Floss we can find that RC4 encryption is in use, also as we explore through Procmon we will see that a file is created in the public folder called Password.txt which contains the password to decrypt the RC4 encoded data. 
 
As you can see there is a process called Houdini which is what causes the program to delete itself and disappear if it can not found an outbound connection to its C2 server or if it is interrupted, or even completes itself  
 
 
 
 
 
